#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Meeting Scheduler
#+AUTHOR:Milo Cress
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.3.1 (Org mode 9.1.6)

* TODO Interactive Shell
  We want our program to be built from a shell interface. This is because the backend and the frontend should be largely separable and modular. So, I'm creating a shell interface that can take several commands:

  - User Operations
    - =userAdd=
    - =userDel=
    - =getUsers=
    - =getStudents=


  - Activity Operations
    - =activityAdd=
    - =activityDel=
    - =activityInvite=
    - =joinActivity=
    - =getActivities=
  - Message Operations
    - =messageAdd=
    - =messageDel=
    - =getMessagesForUser=

  These should be exposed to the interactive shell, command line arguments, and frontend via an =execute("<command>", ["<arg1>", "[arg2]", "[...]"])= function. Two libraries exist, one for each of those goals. The first, =commander=, handles command line, and the next, =inquirer=, handles interactive code.

  #+NAME: interactive_shell_initialization
  #+BEGIN_SRC javascript
    const program  = require('commander');
    const inquirer = require('inquirer');
  #+END_SRC

* Neo4j Configuration
  In order to get the persistent data storage that our webapp needs, we will employ a database. I've chosen a property-graph database for its unique and powerful feature-set and analytical capabilities. We'll have a really easy and useful way of visualizing the users and events at CVU.

  #+NAME: neo4j_initialization
  #+BEGIN_SRC javascript
    const neo4j   = require('neo4j-driver').v1;
    const graphenedbURL =  ( process.env.GRAPHENEDB_BOLT_URL ) ?  process.env.GRAPHENEDB_BOLT_URL : "bolt://localhost:7687";
    const graphenedbUser = ( process.env.GRAPHENEDB_BOLT_USER ) ? process.env.GRAPHENEDB_BOLT_USER  :"neo4j";
    const graphenedbPass = ( process.env.GRAPHENEDB_BOLT_PASSWORD ) ? process.env.GRAPHENEDB_BOLT_PASSWORD  : "those scoreless irate scruffy zombie manhunts" ;

    const driver = neo4j.driver(graphenedbURL, neo4j.auth.basic(graphenedbUser, graphenedbPass))
    const session = driver.session();
  #+END_SRC

  The code for this database must implement several functions:
  - =findByEmail=
  - the user, activity, and message operations detailed in [[Interactive Shell]].
  - Passport authenticated session persistence.
  #+BEGIN_QUOTE
  In order to restore authentication state across HTTP requests, Passport needs to serialize users into and deserialize users out of the session.  The typical implementation of this is as simple as supplying the user ID when serializing, and querying the user record by ID from the database when deserializing.
  #+END_QUOTE
  #+NAME: neo4j_configuration
  #+BEGIN_SRC javascript
    function findByEmail(email, cb) {
        session.run(
            'MATCH (user:User {email: $email}) RETURN user', { email: email }
        ).then(results => {
            session.close();
            if (!results.records[0]) {
                return cb(null, null);
            }
            return cb(null, results.records[0].get('user'));
        });
    }

    function findById(id, cb) {
        session.run(
            'MATCH (user) WHERE ID(user) = $identity RETURN user', { identity: id }
        ).then(results => {
            session.close();
            if (!results.records[0]) {
                return (null, null)
            }
            return cb(null, results.records[0].get('user'));
        });
    }
  #+END_SRC

** User Operations
   These are the operations that will interface with the database to manipulate user settings. User-oriented database functions, such as =userAdd=, =userDel=, and =getUsers=, are to be implemented here.
   #+NAME: neo4j_user_ops
   #+BEGIN_SRC javascript
     function userAdd(email, password, role, firstName, lastName, cb) {
         session.run(
             'CREATE (user:User {email: $email, hashed_password: $hashed_password, role: $role, firstName: $firstName, lastName: $lastName}) RETURN user',
             {
                 email: email,
                 hashed_password: generateHash(password),
                 role: role,
                 firstName: firstName,
                 lastName: lastName
             }
         ).then(results => {
             session.close();
             user = results.records[0].get('user');
             cb(null, user);
         });
     }
     function userDel(userId, cb) {
         session.run(
             'MATCH (user:User) WHERE ID(user) = $userId DETACH DELETE user',
             {userId: userId}
         ).then(results => {
             session.close();
             cb(null);
         });
     }
     function getUsers(cb) {
         session.run(
             'MATCH (users:User) RETURN users'
         ).then(results => {
             session.close();
             users = [];
             results.forEach(res => {
                 users.push(res.get('users'));
             }).then(function() {
                 return cb(null, users);
             });
         });
     }

     function getStudents(cb) {
         session.run(
             'MATCH (users:User) WHERE users.role = "Student" RETURN users'
         ).then(results => {
             session.close();
             users = [];
             results.forEach(res => {
                 users.push(res.get('users'));
             }).then(function() {
                 return cb(null, users);
             });
         });
     }
   #+END_SRC

** Activity Operations
   #+NAME: neo4j_activity_ops
   #+BEGIN_SRC javascript
     function findActivityById(activityId, cb) {
         session.run(
             'MATCH (activity:Activity) WHERE ID(activity) = $activityId RETURN activity',
             {activityId: activityId}).then(results => {
                 session.close();
                 ret = results.records[0].get('activity');
                 if (!ret) { return cb("Activity Not Found", null); }
                 return cb(null, ret);
             });
     }

     /**
        Arguments:
        - creatorId (int)
        The ID of the user who created the activity
        - activityName (string)
        The name of the activity
        - activityDescription (string)
        A description of the activity
        - requested attendees (int array)
        The emails of all requested attendees
        - cb (function)
        Callback Function
     ,**/
     function activityAdd(creatorId, activityName, activityDescription, requestedAttendees, cb) {
         session.run(
             'MATCH (creator:User) WHERE ID(creator) = $creatorId CREATE (creator)-[:CREATED]->(activity:Activity {name: $activityName, description: $activityDescription}) RETURN activity',
             {
                 creatorId: creatorId,
                 activityName: activityName,
                 activityDescription: activityDescription
             }
         ).then(results => {
             session.close();
             activityId = results.records[0].get('activity')["identity"]["low"];
             activityInvite(activityId, requestedAttendees, function(err, activity) {
                 return cb(null, activity);
             })
         });
     }
     function activityDel(activityId, cb) {
         session.run(
             'MATCH (activity:Activity) WHERE ID(activity) = $activityId DETACH DELETE activity',
             {
                 activityId: activityId
             }
         ).then(results => {
             session.close();
             return cb(null);
         })
     }
     function activityInvite(activityId, requestedAttendees, cb) {
         requestedAttendees.forEach(user_email => {
             session.run(
                 'MATCH (activity:Activity),(student:User) WHERE ID(activity) = $activityId AND student.email = $email CREATE (student)-[rel:INVITED_TO]->(activity) rel.time = TIMESTAMP() RETURN student',
                 {
                     activityId: activityId,
                     email: user_email
                 }
             ).then(results => {
                 session.close();
             });
         }).then(function() {
             return cb(null, results.records[0].get('activity'));
         })
     }

     function joinActivity(userId, activityId, cb) {
         session.run(
             'MATCH (activity:Activity),(student:User) WHERE ID(activity) = $activityId AND ID(student) = $studentId CREATE (student)-[rel:JOINED]->(activity) rel.time = TIMESTAMP() RETURN activity'
         ).then(results => {
             session.close();
             return cb(null, results.records[0].get('activity'));
         });
     }

     function getActivities(cb) {
         session.run(
             'MATCH (activities:Activity) RETURN activities'
         ).then(results => {
             session.close();
             activities = [];
             results.forEach(res => {
                 activities.push(res.get('activites'));
             }).then(function() {
                 return cb(null, activities);
             });
         });
     }

   #+END_SRC

** Message Operations

   #+NAME: neo4j_message_ops
   #+BEGIN_SRC javascript 
     function messageAdd(senderId, recipientId, message, cb) {
         session.run(
             'MATCH (sender:User), (recipient:User) WHERE ID(sender) = $senderId AND ID(recipient) = $recipientId CREATE (sender)-[message:SENT]->(recipient) message.body = $message message.time = TIMESTAMP() RETURN message',
             {
                 senderId: senderId,
                 recipientId: recipientId,
                 message: message
             }
         ).then(results => {
             session.close();
             return cb(null, results.records[0].get('message'))
         });
     }
     function messageDel(messageId, cb) {
         session.run(
             'MATCH ()-[r:SENT]->() WHERE ID(r) = messageId DELETE r',
             {
                 messageId: messageId
             }
         ).then(results => {
             session.close();
             return cb(null);
         });
     }

     function getMessagesForUser(userId, cb) {
         session.run(
             'MATCH (recipient:User)<-[message:SENT]-(sender:User) WHERE ID(recipient) = userId RETURN recipient, message, sender',
             {
                 userId: userId
             }
         ).then(results => {
             session.close();
             return cb(results.records);
         });
     }
   #+END_SRC

* Passport Configuration

  #+NAME: passport_initialization
  #+BEGIN_SRC javascript
    const passport = require('passport');
    const bcrypt   = require('bcrypt-nodejs');

    function generateHash (password) {
        return bcrypt.hashSync(password, bcrypt.genSaltSync(12), null);
    }
    function validPassword (password, hashed_password) {
        return bcrypt.compareSync(password, hashed_password);
    };
  #+END_SRC

** Strategies
   #+NAME: passport_strategies
  #+BEGIN_SRC javascript
     var Strategy = require('passport-local').Strategy;


     // Configure the local strategy for use by Passport.
     //
     // The local strategy require a `verify` function which receives the credentials
     // (`username` and `password`) submitted by the user.  The function must verify
     // that the password is correct and then invoke `cb` with a user object, which
     // will be set at `req.user` in route handlers after authentication.
     passport.use('local-login', new Strategy({
         // by default, local strategy uses username and password, we will override with email
         usernameField : 'email',
         passwordField : 'password',
         passReqToCallback : true // allows us to pass back the entire request to the callback
     },
         function(req, email, password, cb) {
             findByEmail(email, function(err, user) {
                 if (err) { return cb(err); }
                 if (!user) { return cb(null, false); }
                 if (!validPassword(password, user["properties"]["hashed_password"])) { return cb(null, false); }
                 req.user = user;
                 return cb(null, user);
             });
         }));

     //Local-signup
     passport.use('local-signup', new Strategy({
         // by default, local strategy uses username and password, we will override with email
         usernameField : 'email',
         passwordField : 'password',
         passReqToCallback : true // allows us to pass back the entire request to the callback
     },
         function(req, email, password, cb) {
             findByEmail(email, function (err, user) {
                 if (!user) {
                     userAdd(email, password, req.body.role_selector, function(err, new_user) {
                         cb(null, new_user);
                     });
                 }
                 else {
                     cb("User Exists", null);
                 }
             })
         }));
  #+END_SRC

** Serializing and Deserializing
   #+NAME: passport_serialize_deserialize
   #+BEGIN_SRC javascript
    passport.serializeUser(function(user, cb) {
        cb(null, user["identity"]["low"]);
    });

    passport.deserializeUser(function(id, cb) {
        findById(id, function (err, user) {
            if (err) { return cb(err); }
            cb(null, user);
        });
    });
   #+END_SRC
* Frontend Configuration
  #+NAME: frontend_initialization
  #+BEGIN_SRC javascript
    const express = require('express');
    const app = express();
    var router = express.Router();
    var express_session = require('express-session');

    var flash    = require('connect-flash');

    var morgan       = require('morgan');
    var cookieParser = require('cookie-parser');
    var bodyParser   = require('body-parser');

    app.set('view engine', 'pug');


    app.use(express_session({
        secret: 'undone cape discount magma outnumber repeater',
        resave: true,
        saveUninitialized: true
    })); // session secret

    app.use(passport.initialize());
    app.use(passport.session()); // persistent login sessions

    app.use(morgan('dev')); // log every request to the console
    app.use(cookieParser()); // read cookies (needed for auth)
    app.use(bodyParser.json()); // get information from html forms
    app.use(bodyParser.urlencoded({
        extended: true
    })); // get information from html forms
    app.use(express.static('public'));
  #+END_SRC

** Root
   #+NAME: root_page
   #+BEGIN_SRC javascript

     app.get('/', function (req, res) {
         if (req.user) { console.log("Welcome " + req.user["properties"]["firstName"]); }
         res.render('index', {
             title:"CVU Study Form",
             user: req.user
         });
     });
   #+END_SRC

   #+BEGIN_SRC pug :tangle ./views/index.pug
     //- index.pug

     title= title
     h1 Welcome!
     h3 This is the Root page.
     if user
       - var firstName = user["properties"]["firstName"]
       p User Detected
       p= firstname 
   #+END_SRC
** Signup
   #+NAME: signup_page
   #+BEGIN_SRC javascript
     //Depending on how the webapp is implemented, we may not want random people creating an account.
     //This code is useful, however, so I will use it.
     app.get('/signup', function (req, res) {
         res.render('signup', { title: "Sign Up" });
     });

     app.post('/signup', passport.authenticate('local-signup', {
         successRedirect : '/profile',
         failureRedirect : '/signup',
         failureFlash    : true
     }));
   
   #+END_SRC

   #+BEGIN_SRC pug :tangle ./views/signup.pug
     //- index.pug

     h3 This is the Signup page.
     form.col.s12(method='post')
       div.row
         div.col.s12
       div.row
         div.input-field.col.s12
           i.material-icons.prefix email
           input.validate(type='email', name='email' id='email')
           label(for='email') Enter your email.
       div.row
         div.input-field.col.s12
           i.material-icons.prefix lock
           input.validate(type='password', name='password' id='password')
           label(for='password') Enter your password.
       div.row
         div.input-field.col.s12
           i.material-icons.prefix lock
           input.validate(type='password', name='password-confirm' id='password-confirm')
           label(for='password') Confirm your password.
         label(style="float: right;")
           a.pink-text(href='/login') Already have an account? Sign in.
       div.row
         div.input-filed.col.s12
           p
             input#Teacher(name="role_selector", type='radio', value="Teacher")
             label(for='Teacher') Teacher
             input#Student(name="role_selector", type='radio', value="Student")
             label(for='Student') Student
       br
       center
       div.row
         button.col.s12.btn.btn-large.waves-effect.red.darken-2(type="submit") Login
   #+END_SRC
** Login
   #+NAME: login_page
   #+BEGIN_SRC javascript
     app.get('/login', function (req, res) {
         res.render('login', { title: "Log in" });
     });

     // process the login form
     app.post('/login', passport.authenticate('local-login', {
         successRedirect : '/profile', // redirect to the secure profile section
         failureRedirect : '/login', // redirect back to the login page if there is an error
         failureFlash : true // allow flash messages
     }));
   #+END_SRC

   #+BEGIN_SRC pug :tangle ./views/login.pug
     form.col.s12(method='post')
       div.row
         div.col.s12
       div.row
         div.input-field.col.s12
           i.material-icons.prefix account_circle
           input.validate(type='email', name='email' id='email')
           label(for='email') Enter your email.
       div.row
         div.input-field.col.s12
           i.material-icons.prefix lock
           input.validate(type='password', name='password' id='password')
           label(for='password') Enter your password.
         label(style="float: right;")
           a.pink-text(href='/signup') Don't have an account? Sign up!
       br
       center
       div.row
         button.col.s12.btn.btn-large.waves-effect.red.darken-2(type="submit") Login
   #+END_SRC
** Profile
   #+NAME: profile_page
   #+BEGIN_SRC javascript
     app.get('/profile', isLoggedIn, function(req, res) {
         res.render('index');
     });

     app.get('/create', isTeacher, function(req, res) {
         res.render('create', { title: "Creating Activity" });
     });
   #+END_SRC


** Create
   #+NAME: create_page
   #+BEGIN_SRC javascript
     app.post('/create', isTeacher, function(req, res) {
         res.redirect('/profile');
     });
   #+END_SRC

** 404 Error page
   #+NAME: 404_error_page
   #+BEGIN_SRC javascript
     //This code must be included last, because any route that comes after it will not be accessible, and will
     //return an error 404 message. Don't be stupid. Don't put code after here. I know I'll do it anyway.

     app.get('*', function(req, res, next){
         res.status(404);

         // respond with html page
         if (req.accepts('html')) {
             res.render('404', { title:"Error 404, Page not found.", url: req.url });
             return;
         }
     });
   #+END_SRC

** Route Middleware Functions
   #+NAME: route_middleware_functions
   #+BEGIN_SRC javascript
     function isLoggedIn(req, res, cb) {

         if (req.isAuthenticated()) {
             return cb();
         }

         res.redirect('/');
     }

     function isTeacher(req, res, cb) {
         if (req.isAuthenticated() && ( req.user["properties"]["role"] == "Teacher" || req.user["properties"]["role"] == "Admin")) {
             return cb();
         }

         res.redirect('/');
     }
   #+END_SRC

** Run Server

   #+NAME: run_server
   #+BEGIN_SRC javascript
     const port = (process.env.PORT) ? process.env.PORT : 3000;
     app.listen(port);
   #+END_SRC
* Complete Code
  #+BEGIN_SRC javascript :tangle server.js :noweb yes
    <<interactive_shell_initialization>>
    <<neo4j_initialization>>
    <<neo4j_configuration>>
    <<neo4j_user_ops>>
    <<neo4j_activity_ops>>
    <<neo4j_message_ops>>
    <<passport_initialization>>
    <<passport_strategies>>
    <<passport_serialize_deserialize>>
    <<frontend_initialization>>
    <<root_page>>
    <<signup_page>>
    <<login_page>>
    <<profile_page>>
    <<create_page>>
    <<404_error_page>>
    <<route_middleware_functions>>
    <<run_server>>
  #+END_SRC
