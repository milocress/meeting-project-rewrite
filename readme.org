#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Meeting Scheduler
#+AUTHOR:Milo Cress
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.3.1 (Org mode 9.1.6)

* Interactive Shell
  We want our program to be built from a shell interface. This is because the backend and the frontend should be largely separable and modular. So, I'm creating a shell interface that can take several corg-element--set-regexps: Symbolâ€™s function definition is void: org-link-types [2 times]ommands:

  - User Operations
    - =userAdd=
    - =userDel=
    - =getUsers=
    - =getStudents=


  - Activity Operations
    - =activityAdd=
    - =activityDel=
    - =activityInvite=
    - =joinActivity=
    - =getActivities=
  - Message Operations
    - =messageAdd=
    - =messageDel=
    - =getMessagesForUser=

** Initialization
   #+NAME: interactive_shell_initialization
   #+BEGIN_SRC javascript
     const commander = require('commander');
     const vorpal    = require('vorpal')();
   #+END_SRC

   #+NAME: interactive_shell_configuration
   #+BEGIN_SRC javascript
     vorpal
         .command('userAdd <email> <password> <role> <firstName> <lastName>', 'Adds User')
         .option('-v, --verbose', 'Prints user information as prettified JSON.')
         .action(function(args, callback) {
             userAdd(args.email, args.password, args.role, args.firstName, args.lastName, (err, user) => {
                 console.log("Created User " + args.firstName + ' ' + args.lastName + '.');
                 if (args.options.verbose) {
                     console.log(JSON.stringify(user, null, '\t'));
                 }
                 callback();
             });
         });


     vorpal
         .command('userDel [email]', 'Deletes User')
         .option('-v, --verbose', 'Prints user information as prettified JSON.')
         .option('-e, --email <email>')
         .option('-i, --id <id>')
         .action(function(args, callback) {
             if (!args.options.id && (args.options.email || args.email)) {
                 console.log("Deleting user by email.");
                 var email = (args.options.email) ? args.options.email : args.email;
                 userDelByEmail(email, (err) => {
                     if (err) { console.log(err); callback(); }
                     else {
                         console.log("Deleted User " + args.options.email + '.');
                         callback();
                     }
                 });
             }
             else if (args.options.id) {
                 console.log("Deleting user by ID.");
                 userDel(args.options.id, (err) => {
                     if (err) { console.log(err); callback(); }
                     else {
                         console.log("Deleted User " + user.properties.email + '.');
                         callback();
                     }
                 });
             }
             else {
                 console.log("Expected ID or Email");
                 callback();
             }
         });

     vorpal
         .delimiter('myapp$')
         .show()
         .parse(process.argv);
   #+END_SRC

* Neo4j Configuration
  In order to get the persistent data storage that our webapp needs, we will employ a database. I've chosen a property-graph database for its unique and powerful feature-set and analytical capabilities. We'll have a really easy and useful way of visualizing the users and events at CVU.
** Initialization
   An annoying thing about this code is that the traditional =port = process.env.PORT || 3000= with the Boolean or thingy (=||=) doesn't work, for whatever reason. In that example, the value of =port= would always be =3000= even if =process.env.PORT= was defined.

   So, I've started using a ternary expression to check if these environment variables are defined, and assign values accordingly (see below).

   This paradigm is ugly, but it seems the more elegant implementation doesn't work, so we'll stick with ugly for the time being, until we have development time to spend on fixing this problem. 
   #+NAME: neo4j_initialization
   #+BEGIN_SRC javascript
     const neo4j          = require('neo4j-driver').v1;
     const graphenedbURL  = ( process.env.GRAPHENEDB_BOLT_URL )      ?  process.env.GRAPHENEDB_BOLT_URL     : "bolt://localhost:7687";
     const graphenedbUser = ( process.env.GRAPHENEDB_BOLT_USER )     ? process.env.GRAPHENEDB_BOLT_USER     : "neo4j";
     const graphenedbPass = ( process.env.GRAPHENEDB_BOLT_PASSWORD ) ? process.env.GRAPHENEDB_BOLT_PASSWORD : "those scoreless irate scruffy zombie manhunts" ;
 
     const driver  = neo4j.driver(graphenedbURL, neo4j.auth.basic(graphenedbUser, graphenedbPass))
     const session = driver.session();
   #+END_SRC

   The code for this database must implement several functions:
   - =findByEmail()=
   - =findById()=
   - the user, activity, and message operations detailed in [[Interactive Shell]].
   - Passport authenticated session persistence.
   #+BEGIN_QUOTE
   In order to restore authentication state across HTTP requests, Passport needs to serialize users into and deserialize users out of the session.  The typical implementation of this is as simple as supplying the user ID when serializing, and querying the user record by ID from the database when deserializing.
   #+END_QUOTE
   #+NAME: neo4j_configuration
   #+BEGIN_SRC javascript
     function findByEmail(email, cb) {
         session.run(
             'MATCH (user:User {email: $email}) RETURN user', { email: email }
         ).then(results => {
             session.close();
             if (!results.records[0]) {
                 return cb(null, null);

     }
             return cb(null, results.records[0].get('user'));
         });
     }

     function findById(id, cb) {
         session.run(
             'MATCH (user) WHERE ID(user) = $identity RETURN user', { identity: neo4j.int(id) }
         ).then(results => {
             session.close();
             if (!results.records[0]) {
                 return (null, null)
             }
             return cb(null, results.records[0].get('user'));
         });
     }
  #+END_SRC

** User Operations
   These are the operations that will interface with the database to manipulate user settings. User-oriented database functions, such as =userAdd=, =userDel=, and =getUsers=, are to be implemented here.
   #+NAME: neo4j_user_ops
   #+BEGIN_SRC javascript
     function userAdd(email, password, role, firstName, lastName, cb) {
         findByEmail(email, function (err, user) {
             if (!user) {
                 session.run(
                     'CREATE (user:User {\
                      email: $email, \
                      hashed_password: $hashed_password, \
                      role: $role, \
                      firstName: $firstName, \
                      lastName: $lastName}) \
                      RETURN user',
                     {
                         email: email,
                         hashed_password: generateHash(password),
                         role: role,
                         firstName: firstName,
                         lastName: lastName
                     }
                 ).then(results => {
                     session.close();
                     user = results.records[0].get('user');
                     cb(null, user);
                 });
             }
             else {
                 console.log("User " + args.email + " exists. Enter a unique email.");
                 cb("User Exists", null);
             }
         })
     }
     function userDel(userId, cb) {
         findById(id, function(err, user) {
             if (user) {
                 session.run(
                     'MATCH (user:User) \
                      WHERE ID(user) = $userId \
                      DETACH DELETE user',
                     {userId: neo4j.int(userId)}
                 ).then(results => {
                     session.close();
                     cb(null);
                 });
             }
             else {
                 console.log("User Doesn't Exist.");
                 cb("User Doesn't Exist.")
             }
         });
     }
     function userDelByEmail(email, cb) {
         findByEmail(email, function(err, user) {
             if (user) {
                 session.run(
                     'MATCH (user:User) \
                      WHERE user.email = $email \
                      DETACH DELETE user',
                     {email: email}
                 ).then(results => {
                     session.close();
                     cb(null)
                 });
             }
             else {
                 cb("User Doesn't Exist.");
             }
         });
     }

     function getUsers(cb) {
         session.run(
             'MATCH (users:User) RETURN users'
         ).then(results => {
             session.close();
             if (!results.records.length) { return cb(null, []); }
             users = [];
             results.records.forEach(res => {
                 users.push(res.get('users'));
             })
             return cb(null, users);
         });
     }

     function getStudents(cb) {
         session.run(
             'MATCH (users:User) \
             WHERE users.role = "Student" \
             RETURN users'
         ).then(results => {
             session.close();
             if (!results.records.length) { return cb(null, []); }
             users = [];
             results.records.forEach(res => {
                 users.push(res.get('users'));
             })
             return cb(null, users);
         });
     }
   #+END_SRC

** Activity Operations
   #+NAME: neo4j_activity_ops
   #+BEGIN_SRC javascript
     function findActivityById(activityId, cb) {
         session.run(
             'MATCH (activity:Activity) \
             WHERE ID(activity) = $activityId \
             RETURN activity',
             {activityId: neo4j.int(activityId)}).then(results => {
                 session.close();
                 ret = results.records[0].get('activity');
                 if (!ret) { return cb("Activity Not Found", null); }
                 return cb(null, ret);
             });
     }

     /**
        Arguments:
        - creatorId (int)
        The ID of the user who created the activity
        - activityName (string)
        The name of the activity
        - activityDescription (string)
        A description of the activity
        - requested attendees (int array)
        The emails of all requested attendees
        - cb (function)
        Callback Function
     ,**/
     function activityAdd(creatorId, activityName, activityDescription, requestedAttendees, cb) {
         session.run(
             'MATCH (creator:User) \
             WHERE ID(creator) = $creatorId \
             CREATE (creator)-[:CREATED]->(activity:Activity {\
               name: $activityName, \
               description: $activityDescription\
             }) \
             RETURN activity',
             {
                 creatorId: neo4j.int(creatorId),
                 activityName: activityName,
                 activityDescription: activityDescription
             }
         ).then(results => {
             session.close();
             activityId = results.records[0].get('activity').identity.low;
             activityInvite(activityId, requestedAttendees, () => {
                 return cb(null, results.records[0].get('activity'));
             })
         });
     }
     function activityDel(activityId, cb) {
         session.run(
             'MATCH (activity:Activity) \
              WHERE ID(activity) = $activityId \
              DETACH DELETE activity',
             {
                 activityId: neo4j.int(activityId)
             }
         ).then(results => {
             session.close();
             return cb(null);
         })
     }
     function activityInvite(activityId, requestedAttendees, cb) {
         requestedAttendees.forEach(user_email => {
             session.run(
                 'MATCH (activity:Activity),(student:User) \
                 WHERE ID(activity) = $activityId AND student.email = $email \
                 CREATE (student)-[rel:INVITED_TO]->(activity) \
                 SET rel.time = TIMESTAMP()',
                 {
                     activityId: neo4j.int(activityId),
                     email: user_email
                 }
             ).then(results => {
                 session.close();
             });
         });
         return cb();
     }

     function joinActivity(userId, activityId, cb) {
         session.run(
             'MATCH (activity:Activity),(student:User) \
             WHERE ID(activity) = $activityId AND ID(student) = $studentId \
             CREATE (student)-[rel:JOINED]->(activity) \
             SET rel.time = TIMESTAMP() \
             RETURN activity'
         ).then(results => {
             session.close();
             return cb(null, results.records[0].get('activity'));
         });
     }

     function getActivities(cb) {
         session.run(
             'MATCH (activities:Activity) RETURN activities'
         ).then(results => {
             session.close();
             if (!results.records.length) { return cb(null, []); }
             activities = [];
             results.records.forEach(res => {
                 activities.push(res.get('activities'));
             })
             return cb(null, activities);
         });
     }

   #+END_SRC

** Message Operations

   #+NAME: neo4j_message_ops
   #+BEGIN_SRC javascript 
     function messageAdd(senderId, recipientId, message, cb) {
         session.run(
             'MATCH (sender:User), (recipient:User) WHERE ID(sender) = $senderId AND ID(recipient) = $recipientId CREATE (sender)-[message:SENT]->(recipient) message.body = $message message.time = TIMESTAMP() RETURN message',
             {
                 senderId: neo4j.int(senderId),
                 recipientId: neo4j.int(recipientId),
                 message: message
             }
         ).then(results => {
             session.close();
             return cb(null, results.records[0].get('message'))
         });
     }
     function messageDel(messageId, cb) {
         session.run(
             'MATCH ()-[r:SENT]->() WHERE ID(r) = messageId DELETE r',
             {
                 messageId: neo4j.int(messageId)
             }
         ).then(results => {
             session.close();
             return cb(null);
         });
     }

     function getMessagesForUser(userId, cb) {
         session.run(
             'MATCH (recipient:User)<-[message:SENT]-(sender:User) WHERE ID(recipient) = $userId RETURN message, sender',
             {
                 userId: neo4j.int(userId)
             }
         ).then(results => {
             session.close();
             var ret = [];
             if (!results.records.length) { return cb(null, []); }
             results.records.forEach((record) => {
                 console.log('Pushing...');
                 ret.push({
                     sender: record.get('sender'),
                     messages: record.get('message')
                 });
             });
             return cb(null, ret);
         });
     }
   #+END_SRC

* Passport Configuration
** Initialization
  #+NAME: passport_initialization
  #+BEGIN_SRC javascript
    const passport = require('passport');
    const bcrypt   = require('bcrypt-nodejs');

    function generateHash (password) {
        return bcrypt.hashSync(password, bcrypt.genSaltSync(12), null);
    }
    function validPassword (password, hashed_password) {
        return bcrypt.compareSync(password, hashed_password);
    };
  #+END_SRC

** Strategies
   #+NAME: passport_strategies
  #+BEGIN_SRC javascript
     var Strategy = require('passport-local').Strategy;


     // Configure the local strategy for use by Passport.
     //
     // The local strategy require a `verify` function which receives the credentials
     // (`username` and `password`) submitted by the user.  The function must verify
     // that the password is correct and then invoke `cb` with a user object, which
     // will be set at `req.user` in route handlers after authentication.
     passport.use('local-login', new Strategy({
         // by default, local strategy uses username and password, we will override with email
         usernameField : 'email',
         passwordField : 'password',
         passReqToCallback : true // allows us to pass back the entire request to the callback
     },
         function(req, email, password, cb) {
             findByEmail(email, function(err, user) {
                 if (err) { return cb(err); }
                 if (!user) { return cb(null, false); }
                 if (!validPassword(password, user.properties.hashed_password)) { return cb(null, false); }
                 req.user = user;
                 return cb(null, user);
             });
         }));

     //Local-signup
     passport.use('local-signup', new Strategy({
         // by default, local strategy uses username and password, we will override with email
         usernameField : 'email',
         passwordField : 'password',
         passReqToCallback : true // allows us to pass back the entire request to the callback
     },
         function(req, email, password, cb) {
             findByEmail(email, function (err, user) {
                 if (!user) {
                     userAdd(email, password, req.body.role_selector, req.body.firstName, req.body.lastName, function(err, new_user) {
                         cb(null, new_user);
                     });
                 }
                 else {
                     cb("User Exists", null);
                 }
             })
         }));
  #+END_SRC

** Serializing and Deserializing
   #+NAME: passport_serialize_deserialize
   #+BEGIN_SRC javascript
    passport.serializeUser(function(user, cb) {
        cb(null, user.identity.low);
    });

    passport.deserializeUser(function(id, cb) {
        findById(id, function (err, user) {
            if (err) { return cb(err); }
            cb(null, user);
        });
    });
   #+END_SRC
* Frontend Configuration
** Initialization
  #+NAME: frontend_initialization
  #+BEGIN_SRC javascript
    const express = require('express');
    const app = express();
    var router = express.Router();
    var express_session = require('express-session');

    var flash = require('connect-flash');

    var morgan       = require('morgan');
    var cookieParser = require('cookie-parser');
    var bodyParser   = require('body-parser');

    app.set('view engine', 'pug');


    app.use(express_session({
        secret: 'undone cape discount magma outnumber repeater',
        resave: true,
        saveUninitialized: true
    })); // session secret

    app.use(passport.initialize());
    app.use(passport.session()); // persistent login sessions

    //app.use(morgan('dev')); // log every request to the console
    app.use(cookieParser()); // read cookies (needed for auth)
    app.use(bodyParser.json()); // get information from html forms
    app.use(bodyParser.urlencoded({
        extended: true
    })); // get information from html forms
    app.use(express.static('public'));
  #+END_SRC

** Layout Template
   #+BEGIN_SRC pug :tangle ./views/layout.pug
     include ./head-mixin.pug
     include ./header-mixin.pug
     include ./parallax-mixin.pug
     include ./footer-mixin.pug
     include ./body-scripts-mixin.pug

     doctype html
     html(lang='en')
       head
         +head
         block title
       body
         +header
         block content
         +footer
         +body-scripts
   #+END_SRC
** Head Mixin
  #+BEGIN_SRC pug :tangle ./views/head-mixin.pug
    //- Declaration (head-mixin.pug)
    mixin head
      head
        link(rel='shortcut icon', href='/res/favicon.png')

        meta(http-equiv="Content-Type", content="text/html; charset=UTF-8")
        meta(name="viewport", content="width=device-width, initial-scale=1")

        //Google Sign-In Form
        //meta(name="google-signin-scope", content="profile email")
        //meta(name="google-signin-client_id", content="YOUR_CLIENT_ID.apps.googleusercontent.com")
        //script(src="https://apis.google.com/js/platform.js", async, defer

        //CSS
        link(href="https://fonts.googleapis.com/icon?family=Material+Icons", rel="stylesheet")
        link(href="css/materialize.css", type="text/css", rel="stylesheet", media="screen,projection")
        link(href="css/style.css", type="text/css", rel="stylesheet", media="screen,projection")

        //Prism CSS
        link(href="themes/prism.css" rel="stylesheet") 
  #+END_SRC 

** Header Mixin
  #+BEGIN_SRC pug :tangle ./views/header-mixin.pug
    //- Declaration (header-mixin.pug)
    mixin header (title)
      nav(class='red darken-2', role='navigation')
        div.nav-wrapper.container
          a#logo-container.brand-logo(href='#') CVUHS 
          ul.right.hide-on-med-and-down
            li
              a(href='/profile') Teachers
            li
              a(href='/profile') Students

          ul#nav-mobile.side-nav
            li
              a(href='#Teachers') Teachers
            li
              a(href='#Students') Students
          a.button-collapse(href="#", data-activates="nav-mobile")
            i.material-icons menu
  #+END_SRC 

** Parallax Mixin
  #+BEGIN_SRC pug :tangle ./views/parallax-mixin.pug
    //- Declaration (parallax-mixin.pug)
    //- just saying 'class' doesn't work. It needs a unique variable name.
    mixin parallax(image, id, classarg)
      div.parallax-container(id=id, class=classarg)
        div.section.no-pad-bot
          div.container
            if block
              block
            else
              h1.header.center.red-text.text-lighten-2 No Content Provided
        div.parallax
          img(src=image)
  #+END_SRC 

** Footer Mixin
  #+BEGIN_SRC pug :tangle ./views/footer-mixin.pug
    //- Declaration (footer-mixin.pug)
    mixin footer
      footer.page-footer.red.darken-2
        div.container
          div.row
            div.col.s12
              h5.white-text About CVU
              p.grey-text.text-lighten-4 Champlain Valley Union High School is a community dedicated to facilitating and empowering students in their education. It's a fun place to go to school for sure :)
              a#download-button.btn.waves-effect.waves-light.teal.lighten-1(href='https://www.cvsdvt.org/Domain/12') Learn More

        div.footer-copyright
          div.container.
            &copy;CVUHS #{(new Date()).getFullYear()}. Powered by node.js, neo4j, materialize.css, and lots of caffeine.
  #+END_SRC 

** Body Scripts Mixin
  #+BEGIN_SRC pug :tangle ./views/body-scripts-mixin.pug
    //- Declaration (body-scripts-mixin.pug)
    mixin body-scripts
      script(src="https://code.jquery.com/jquery-2.1.1.min.js")
      script(src='js/materialize.js')
      script(src='js/init.js')
      script(src="js/prism.js")
  #+END_SRC 
** Root
   #+NAME: root_page
   #+BEGIN_SRC javascript

     app.get('/', function (req, res) {
         res.render('index', {
             title:"CVU Study Form",
             user: req.user
         });
     });
   #+END_SRC

   #+BEGIN_SRC pug :tangle ./views/index.pug
     //- index.pug
     extends layout.pug
     block title
       title= title

     block content
       +parallax('/res/background-edited1.jpg', 'index-banner')
         h1.header.center.red-text.text-lighten-2 CVU Study Form
         div.row.center
           h5.header.col.s12.light Designed to put students and teachers together in the place they're needed most. 
         div.row.center
           a#teacher-button.btn-large.waves-effect.waves-light.red.lighten-1(href='/login') Log in

       div.container
         div.section

           //Icon Section
           div.row
             div.col.s12.m4
               div.icon-block
                 h2.center.red-text
                   i.material-icons flash_on
                 h5.center Log In
                 p.light Log In
                 a.btn-large.waves-effect.waves-light.red.lighten-1(href="/login") Login

             div.col.s12.m4
               div.icon-block
                 h2.center.red-text
                   i.material-icons group
                 h5.center Create an Account
                 p.light Create an Account
                 a.btn-large.waves-effect.waves-light.red.lighten-1(href="/signup") Signup

             div.col.s12.m4
               div.icon-block
                 h2.center.red-text
                   i.material-icons settings
                 h5.center Create an Activity
                 p.light Create an Activity
                 a.btn-large.waves-effect.waves-light.red.lighten-1(href="/create") Create

   #+END_SRC
** Signup
   #+NAME: signup_page
   #+BEGIN_SRC javascript
     //Depending on how the webapp is implemented, we may not want random people creating an account.
     //This code is useful, however, so I will use it.
     app.get('/signup', function (req, res) {
         res.render('signup', { title: "Sign Up" });
     });

     app.post('/signup', passport.authenticate('local-signup', {
         successRedirect : '/profile',
         failureRedirect : '/signup',
         failureFlash    : true
     }));
   
   #+END_SRC

   #+BEGIN_SRC pug :tangle ./views/signup.pug
     //- index.pug
     extends layout.pug

     block title
       title Sign Up

     block content
       div.container
         h3 This is the Signup page.
         form.col.s12(method='post')
           div.row
             div.col.s12
           div.row
             div.input-field.col.s12
               i.material-icons.prefix email
               input.validate(type='email', name='email' id='email')
               label(for='email') Enter your email.
           div.row
             div.input-field.col.s6
               i.material-icons.prefix lock
               input.validate(type='password', name='password' id='password')
               label(for='password') Enter your password.
             div.input-field.col.s6
               input.validate(type='password', name='password-confirm' id='password-confirm')
               label(for='password') Confirm your password.
             label(style="float: right;")
           div.row
             div.input-field.col.s6
                 i.material-icons.prefix account_circle
                 input#firstName(name="firstName", type="text")
                 label(for='firstName') First Name
             div.input-field.col.s6
                 input#lastName(name="lastName", type="text")
                 label(for='lastName') Last Name
           center
             a.pink-text(href='/login') Already have an account? Sign in.
           div.row
             div.input-fied.col.s12
               p
                 input#teacher(name="role_selector", type='radio', value="Teacher")
                 label(for='teacher') Teacher
                 br
                 input#student(name="role_selector", type='radio', value="Student")
                 label(for='student') Student
           br
           div.row
             button.col.s12.btn.btn-large.waves-effect.red.darken-2(type="submit") Login
   #+END_SRC
** Login
   #+NAME: login_page
   #+BEGIN_SRC javascript
     app.get('/login', function (req, res) {
         res.render('login', { title: "Log in" });
     });

     // process the login form
     app.post('/login', passport.authenticate('local-login', {
         successRedirect : '/profile', // redirect to the secure profile section
         failureRedirect : '/login', // redirect back to the login page if there is an error
         failureFlash : true // allow flash messages
     }));
   #+END_SRC

   #+BEGIN_SRC pug :tangle ./views/login.pug
     //- login.pug
     extends layout.pug

     block title
       title Login

     block content
       div.container
         form.col.s12(method='post')
           div.row
             div.col.s12
           div.row
             div.input-field.col.s12
               i.material-icons.prefix account_circle
               input.validate(type='email', name='email' id='email')
               label(for='email') Enter your email.
           div.row
             div.input-field.col.s12
               i.material-icons.prefix lock
               input.validate(type='password', name='password' id='password')
               label(for='password') Enter your password.
             label(style="float: right;")
               a.pink-text(href='/signup') Don't have an account? Sign up!
           br
           center
           div.row
             button.col.s12.btn.btn-large.waves-effect.red.darken-2(type="submit") Login
   #+END_SRC
** Profile
   #+NAME: profile_page
   #+BEGIN_SRC javascript
     app.get('/profile', isLoggedIn, function (req, res) {
         const activityPromise = new Promise((resolve, reject) => {
             getActivities((err, activities) => {
                 if (err) { reject(err); }
                 else { resolve(activities); }
             });
         });
         const messagePromise = new Promise((resolve, reject) => {
             getMessagesForUser(req.user.identity.low, (err, messages) => {
                 if (err) { reject(err); }
                 else { resolve(messages); }
             });
         });
         const userPromise = new Promise((resolve, reject) => {
             getUsers((err, users) => {
                 if (err) { reject(err); }
                 else { resolve(users); }
             });
         });
         Promise.all([activityPromise, messagePromise, userPromise]).then((results) => {
             activities = results[0];
             messages = results[1];
             users = results[2];
             res.render('profile', {
                 title: "Profile",
                 user: req.user,
                 activities: activities,
                 messageRecords: messages,
                 users: users
             });
         })
     });
   #+END_SRC

   #+BEGIN_SRC pug :tangle ./views/profile.pug
     //- profile.pug
     extends layout.pug

     block title
       title= title

     block content
       div.container
         h1 Welcome!
         h3 This is the Profile page.
         a(href="/create") Create an Activity!
         if user
           p User Detected
           p Welcome, #{user.properties.firstName}
         h3 Here are your messages:
         ul
           each element in messageRecords
             li Message: #{element.message}, Sender: #{element.sender}
           else
             li No messages :()
         h3 Here are the available activities:
         ul
           each element in activities
             li
               h4= element.properties.name
               pre.language-json
                 code.language-json= JSON.stringify(element, null, '\t')
           else
             p No activities yet :()

         h3 Here are the users of the system:
         ul
           each element in users
             li
               h4 #{element.properties.firstName + ' ' + element.properties.lastName}
               pre.language-json
                 code.language-json= JSON.stringify(element, null, '\t')
           else
             li No users :()
   #+END_SRC
** Create
   #+NAME: create_page
   #+BEGIN_SRC javascript
     app.get('/create', isTeacher, function(req, res) {
         res.render('create', { title: "Creating Activity" });
     });
     app.post('/create', isTeacher, function(req, res) {
         activityAdd(req.user.identity.low,
                     req.body.activityName,
                     req.body.activityDescription,
                     req.body.requestedAttendees.split(", "),
                     (err, activity) => {
                         console.log("Created activity \"" + activity.properties.description + "\"");
                         res.redirect('/profile');
                     });
     });
   #+END_SRC

   #+BEGIN_SRC pug :tangle ./views/create.pug
     //- create.pug
     extends layout.pug

     block title
       title= title

     block content
       div.container
         h1 Create an Activity
         form.col.s12(method='post')
           div.row
             div.input-field.col.s12
               input#activityName(type='text', name='activityName')
               label(for='activityName') Name your new activity.
           div.row
             div.input-field.col.s12
               input#activityDescription(type='text', name='activityDescription')
               label(for='activityDescription') Describe your activity.
           div.row
             div.input-field.col.s12
               input#requestedAttendees(type='text', name='requestedAttendees')
               label(for='requestedAttendees') Invite students to your activity
           br
           center
           div.row
             button.col.s12.btn.btn-large.waves-effect.red.darken-2(type="submit") Login
   #+END_SRC

** 404 Error page
     This code must be included last, because any route that comes after it will not be accessible, and will return an error 404 message. Don't be stupid. Don't put routing code after here. 
   #+NAME: 404_error_page
   #+BEGIN_SRC javascript
     app.get('*', function(req, res, next){
         res.status(404);

         // respond with html page
         if (req.accepts('html')) {
             res.render('404', { title:"Error 404, Page not found.", url: req.url });
             return;
         }
     });
   #+END_SRC

   #+BEGIN_SRC pug :tangle ./views/404.pug
     //- 404.pug
     extends layout

     block title
       title= title

     block content
       +parallax('/res/background-edited1.jpg', 'index-banner')
         h1.header.center.red-text.text-lighten-2 That's an error! Whoops!
         div.row.center
           h5.header.col.s12.light The page you requested, #{url}, does not exist. Try re-entering it, or stick around and we'll show you a cat video.

       div.blue-grey.darken-4
         div.container
           div.section
             div.row
               div.col.s12.center
                 h4.white-text You know you want to.
                 <iframe width="560" height="315" src="https://www.youtube.com/embed/m9VO7X_q9nw?rel=0" frameborder="0" allowfullscreen></iframe>
   #+END_SRC

** Route Middleware Functions
   #+NAME: route_middleware_functions
   #+BEGIN_SRC javascript
     function isLoggedIn(req, res, cb) {

         if (req.isAuthenticated()) {
             return cb();
         }

         res.redirect('/');
     }

     function isTeacher(req, res, cb) {
         if (req.isAuthenticated() && ( req.user.properties.role === "Teacher" || req.user.properties.role == "Admin")) {
             return cb();
         }

         res.redirect('/');
     }
   #+END_SRC

** Run Server
   #+NAME: run_server
   #+BEGIN_SRC javascript
     const port = (process.env.PORT) ? process.env.PORT : 3000;
     app.listen(port);
   #+END_SRC
* Complete Code
  #+BEGIN_SRC javascript :tangle server.js :noweb yes
    #! /usr/bin/node
    <<interactive_shell_initialization>>
    <<neo4j_initialization>>
    <<neo4j_configuration>>
    <<neo4j_user_ops>>
    <<neo4j_activity_ops>>
    <<neo4j_message_ops>>
    <<passport_initialization>>
    <<passport_strategies>>
    <<passport_serialize_deserialize>>
    <<frontend_initialization>>
    <<root_page>>
    <<signup_page>>
    <<login_page>>
    <<profile_page>>
    <<create_page>>
    <<404_error_page>>
    <<route_middleware_functions>>
    <<run_server>>
    <<interactive_shell_configuration>>
  #+END_SRC
